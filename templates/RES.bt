//------------------------------------------------
//--- 010 Editor v8.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

local uint size, i;
local string str;

typedef struct {
  FLOAT R;
  FLOAT G;
  FLOAT B;
  FLOAT A;
} VECTOR_4F;

typedef struct {
  FLOAT X;
  FLOAT Y;
  FLOAT Z;
} VECTOR_3F;

typedef struct {
  FLOAT X;
  FLOAT Y;
} VECTOR_2F;

typedef struct {
  UINT V1;
  UINT V2;
  UINT V3;
  UINT V4;
  UINT V5;
  UINT V6;
  UINT V7;
  UINT V7;
  UINT V8;
  UINT V9;
  UINT V10;
  UINT V11;
  UINT V12;
  UINT V13;
  UINT V14;
  UINT V15;
} PARAMS;

struct {
  char Magic[4];
  UINT Size <name="File size">;
} FILE_HEADER;

struct {
  char Name[8];
  UINT Size;
  UINT Unknown;
  UINT Unknown;
  UINT Count;
} DATAOBJ_HEADER;

typedef struct {

  UINT Size;
  UINT NVid;
  size = ReadStringLength(FTell());
  string Name;
  UINT SpriteType;
  UINT SpriteClass;
  UINT Property;
  UINT MoveMask;
  VECTOR_3F Scale <name="Size">;

  UINT MaxHP;
  FLOAT MaxSpeed;
  UINT MaxZSpeed;
  FLOAT Acceleration;

  FLOAT RotationPeriod;
  FLOAT NWeapon;
  FLOAT DeathRange;
  FLOAT DeathDamageMinMax;

  UINT DeathPush;
  VECTOR_3F LinkCoor <name="LinkCoor">;
  UINT LinkVid;
  UINT TopZ;

  VECTOR_2F ForMoveUpDownZ <name="ForMoveUpDownZ">;
  UINT LifeTime;
  // UINT Reserved;
  // UINT NoDir;

  PARAMS NOFRAME <name="NOFRAME">;
  PARAMS SFX <name="SFX">;
  PARAMS FrameSpeed <name="FrameSpeed">;
  PARAMS ChildX <name="ChildX">;
  PARAMS ChildY <name="ChildY">;
  PARAMS ChildZ <name="ChildZ">;
  PARAMS ChildVid <name="ChildVid">;
  PARAMS NoChild <name="NoChild">;

 // VECTOR_4F GammaRGBA;

  VECTOR_3F Scale <name="Scale">;

  string VidName;

} OBJECT <name=getObjectName>;

string getObjectName(OBJECT &obj) 
{
  return obj.VidName;
}

struct {
  OBJECT Object[DATAOBJ_HEADER.Count] <optimize=false>;
} DATAOBJ_DATA;

BYTE A;

struct {
  char Name[4];
  UINT Size;
  UINT Unknown;
  UINT Unknown;
  UINT Count;
} CNST_HEADER;

struct {
  UINT MaxScrollSpeedX;
  UINT MaxScrollSpeedY;
  UINT Gravitation;
  UINT Gravitation2;
  UINT RepairSpeed;
  UINT AmmoReloadTime;
  UINT RailRepairSpeed;
  UINT MasterRepairSpeed;
  UINT Friction;
  UINT DepoMillisecondsInSecond;
  UINT DebugMode;
  UINT DepoAutoRepairTimeInSeconds;
  UINT MasterAutoRepairTimeInSeconds;
  UINT MouseTipsTime;
  UINT DepoAutoAddHpPerSecond;
  UINT MasterAutoAddHpPerSecond;
  UINT FortCannonsAutoAddHpPerSecond;
  UINT RepairSettingMineTime;
  UINT RepairDestroyingMineTime;
  UINT DirijbanAmmoReloadTime;
  UINT SelectUnitGamma;
  UINT AttackUnitGamma;
  UINT LightedUnitGamma;
  UINT NukeForBirth;
  UINT SafeClashSpeed;
  UINT MessageStartDelay;
} CNST_DATA;

struct {
  char Name[4];
  UINT Size;
  UINT Unknown;
  UINT Unknown;
  UINT Count;
} WEAP_HEADER;

struct {
  struct {
    UINT Param1;
    UINT Param2;
    UINT Param3;
    FLOAT Param4;
    FLOAT Param5;
    FLOAT Param6;
    FLOAT Param7;
    FLOAT Param8;
    FLOAT Param9;
    UINT Param10;
    UINT Param11;
    UINT Param12;
    UINT Param13;
    UINT Param14;
    UINT Param15;
    UINT Param16;
    UINT Param17;
    FLOAT Param18;
  } WEAPON[WEAP_HEADER.Count];
} WEAP_DATA;

struct {
  char Name[4];
  UINT Size;
  UINT Unknown;
  UINT Unknown;
  UINT Count;
} SFX_HEADER;

struct {
  struct {
    UINT Property;
    BYTE Priority;
    for (i = 0; i < 7; ++i)
      struct {  
        string Wave;
      } FILENAME;     
    BYTE ForceFeedBack;
  } SFX[SFX_HEADER.Count] <optimize=false>;
} SFX_DATA;
