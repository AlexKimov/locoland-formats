//------------------------------------------------
//--- 010 Editor v8.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

local float count;

typedef enum <char> {
  RES,
  SPR,
  SPRD,
  GROU,
  PLAY,
  GRPH,
  GRID,
  HEAD
} IDENTIFIER;

typedef struct {
  FLOAT X;
  FLOAT Y;
  FLOAT Z;
} VECTOR_3F;

typedef struct {
  FLOAT X;
  FLOAT Y;
} VECTOR_2F;

struct {
  char Magic[4];
  UINT Size <name="File size">;
} FILE_HEADER;

struct {
  char Name[8];
  UINT Size1;
  FLOAT Unknown;
  UINT Unknown;
  UINT Unknown;
  UINT Size2;
  UINT16 Unknown;
  UINT16 Unknown;
  string Name0;

  struct {
    UINT A;
    UINT A;
    UINT A;
    UINT A;
    UINT A;
    UINT A;
    UINT A;
    UINT A;
    UINT A;
    UINT A;
    UINT A;
    UINT A;
    UINT A;
    BYTE D1[472];
    BYTE D2[84];
  } Y;


  VECTOR_3F Scale <name="Scale">;
  string Name1;
  string Name2;

  count = (Size1 - 685)/16; 

  struct {
    IDENTIFIER ID[4];
    UINT B;
    FLOAT D;
    UINT B;
  } GRPH[count];

  UINT Unknown;

  struct {
    UINT Size;
    UINT Unknown;
    UINT Unknown;
    UINT Unknown;
    UINT Unknown;
    FLOAT Unknown;
  } K;
} MAP_OBJ;

struct {
  IDENTIFIER ID[4];
  UINT Size;
  FLOAT Unknown;
  UINT Unknown;
  UINT Unknown;
  UINT Size;
  VECTOR_2F MapSize <name="Map Size">;
  FLOAT Unknown;
  FLOAT Unknown;
  UINT Unknown;
  UINT Unknown;
} HEAD;

struct {
  IDENTIFIER ID[4];
  UINT B;
  FLOAT B;
  UINT B;
  UINT B;
  UINT Size;
  UINT16 Data[Size/2];
} GRID;

struct {
  IDENTIFIER ID[4];
  UINT B;
  FLOAT B;
  UINT B;
  UINT B;
  UINT Size;

  count = Size/28.0; 

  struct {
    UINT Unknown;  
    UINT Index; // object index in objects.res
    VECTOR_2F Position <name="Position">;
    FLOAT zIndex; // sprite z-index
    UINT FrameNumber; // number of frame / direction 
    UINT Unknown; // 0   
  } SPRITE[count]; 

  INT Unknown;
} SPR; // static sprites: background, buildings and so on

struct {
  IDENTIFIER ID[4];
  UINT Size;
  FLOAT Unknown;
  UINT Unknown;
  UINT Count;

  struct {
    UINT Size;
    if (Size == 4)
        INT Unknown;
    else
    if (Size == 88) 
    {
      UINT Unknown; 
      UINT Unknown; 
      UINT Unknown; 
      UINT Unknown; 
      UINT Unknown; 
      UINT Unknown; 
      FLOAT Width; 
      FLOAT Heigh; 
      INT Unknown; 
      INT Unknown; 
      INT Unknown; 
      INT Unknown; 
      INT Unknown; 
      INT Unknown; 
      INT Unknown; 
      INT Unknown; 
      INT Unknown; 
      INT Unknown; 
      INT Unknown; 
      INT Unknown; 
      INT Unknown; 
      INT Unknown; 
    }   
    else
    {
      UINT16 Unknown; 
      UINT16 Unknown;    
      UINT A;
      if (Size > 8) 
      {
        UINT Type;   
        UINT Count;
        if (Type == 1)
        {
          if (Size != 16)
          {
            if (Count > 0)
            {
              UINT Unknown;
              UINT Unknown;
            } 
            if (Count == 0) 
            struct {
              UINT Unknown;
              UINT Unknown;
              UINT Unknown;
              UINT Unknown;
            } DATA[2];
            else
              struct {
                UINT Unknown;
                UINT Unknown;
                UINT Unknown;
                UINT Unknown;
              } DATA[Count];
          UINT Unknown;
          UINT Unknown; 
          };
        } 
        else
        {
          BYTE Data[Size - 16];
        }     
      };     
    };
  } SPRITE[Count] <optimize=false>; 
} SPRD;

struct {
  IDENTIFIER ID[4];
  UINT Size;
  FLOAT Unknown;
  UINT Unknown;
  UINT Unknown;
  UINT Unknown;
  UINT Unknown;
  UINT Unknown;
  UINT Unknown;
  INT Unknown;
} PLAY;

struct {
  IDENTIFIER ID[4];
  UINT Size;
  FLOAT Unknown;
  UINT Unknown;
  UINT Unknown;
  UINT Size;
  INT Unknown; 
} GROU;

